import java.util.Scanner;

public class Fibonakki {
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc=new Scanner(System.in);
		int T=sc.nextInt();
		for(int t=0;t<T;t++){
			long N=sc.nextLong();
			long max=0;
			for(int i=1;i<=N;i++){
				long temp=gfibo(i)%1007;
				if(max<temp)
					max=temp;
			}
			System.out.println(max);
			
		}

	}
	
	 public static long fibonacciRecusion(long number){
	        if(number == 1 || number == 2){
	            return 1;
	        }
	 
	        return fibonacciRecusion(number-1) + fibonacciRecusion(number -2); 
	    }
	 public static long gfibo(long number){
	        if(number == 0){
	            return 0;
	        }
	 
	        return gfibo(number-1) + fibonacciRecusion(4*number -1); 
	    }

}
/*
F(n)=1 if n=1 or n=2

F(n)=F(n-1)+F(n-2) if n>2

Now let, G(n) is defined as follows:

G(n)=0 if n=0

G(n)=G(n-1)+F(4n-1) if n>0
import java.util.Scanner;
 

public class CrunchifyFibonacci {
 
    @SuppressWarnings("resource")
    public static void main(String args[]) {
 
        for(int i=1; i<=number; i++){
            System.out.print(fibonacciRecusion(i) +" ");
        }
    } 
 
    // Java program for Fibonacci number using recursion.
    public static int fibonacciRecusion(int number){
        if(number == 1 || number == 2){
            return 1;
        }
 
        return fibonacciRecusion(number-1) + fibonacciRecusion(number -2); //tail recursion
    }
 
    // Java program for Fibonacci number using Loop.
    public static int fibonacciLoop(int number){
        if(number == 1 || number == 2){
            return 1;
        }
        int fibo1=1, fibo2=1, fibonacci=1;
        for(int i= 3; i<= number; i++){
            fibonacci = fibo1 + fibo2; //Fibonacci number is sum of previous two Fibonacci number
            fibo1 = fibo2;
            fibo2 = fibonacci;
 
        }
        return fibonacci; //Fibonacci number
    }     
}
*/