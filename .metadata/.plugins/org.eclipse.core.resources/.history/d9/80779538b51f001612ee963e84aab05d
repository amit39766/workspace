package amit.diu;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.InputMismatchException;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Queue;
import java.util.Scanner;
import java.util.Set;
public class BFS

{ 
    private Queue<Integer> queue;

     public BFS()
    {

        queue = new LinkedList<Integer>();
    }
 
    public ArrayList<Integer> bfs(int adjacency_matrix[][], int source)

    {
        int number_of_nodes = adjacency_matrix[source].length - 1;
        ArrayList<Integer> path=new ArrayList<Integer>();
        int[] visited = new int[number_of_nodes + 1];
        int i, element;
        visited[source] = 1;
        queue.add(source);
        while (!queue.isEmpty())
        {
        	
            element = queue.remove();
            path.add(element);
            i = element;
            System.out.print(i + "\t");
            while (i <= number_of_nodes)

            {
                if (adjacency_matrix[element][i] == 1 && visited[i] == 0)

                {
                    queue.add(i);
                    visited[i] = 1;
                }

                i++;
            }
        }
		return path;
    }
    public static Map<Integer,Integer> cmap=new HashMap<Integer,Integer>();
    
    public static void main(String args[])

    {
        int number_no_nodes, source;
       // ArrayList<Integer> arrayList=new ArrayList<>();
        Scanner scanner = null;
        try
        {
            //System.out.println("Enter the number of nodes in the graph");
            scanner = new Scanner(System.in);
            number_no_nodes = scanner.nextInt();
            for(int n=1;n<=number_no_nodes;n++){
            	cmap.put(n, scanner.nextInt());
            }
             int adjacency_matrix[][] = new int[number_no_nodes + 1][number_no_nodes + 1];
           // System.out.println("Enter the adjacency matrix");
            for (int i = 1; i <= number_no_nodes; i++)
                for (int j = 1; j <= number_no_nodes; j++)
                	if(i==j)
                		adjacency_matrix[i][j] = 1;
            for(int k=1;k<number_no_nodes;k++)
            	adjacency_matrix[scanner.nextInt()][scanner.nextInt()] = 1;
            //System.out.println("Enter the source for the graph");
            ArrayList<Integer> matrix;
            Set<Integer> intSet=new HashSet<Integer>();
                        
            
            	for(int a=1;a<=number_no_nodes;a++){
            		source=a;
            		BFS bfs=new BFS();
            		matrix=(bfs.bfs(adjacency_matrix, source));
            		int sum=0;
            		for(int al=0;al<matrix.size();al++){
            	        	intSet.add(cmap.get(matrix.get(al)));
            	        	sum+=cmap.size();

            			}
            		
            		 System.out.println(sum);
            		cmap.clear();
            		
            	
            }

        } catch (InputMismatchException inputMismatch)

        {
            System.out.println("Wrong Input Format");
        }
        scanner.close();
    }
}