package amit.diu;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;

class FGraph {
	private Map<Integer, LinkedHashSet<Integer>> map = new HashMap();

	public void addEdge(int node1, int node2) {
		LinkedHashSet<Integer> adjacent = map.get(node1);
		if (adjacent == null) {
			adjacent = new LinkedHashSet();
			map.put(node1, adjacent);
		}
		adjacent.add(node2);
	}

	public void addTwoWayVertex(int node1, int node2) {
		addEdge(node1, node2);
		addEdge(node2, node1);
	}

	public boolean isConnected(int node1, int node2) {
		Set adjacent = map.get(node1);
		if (adjacent == null) {
			return false;
		}
		return adjacent.contains(node2);
	}

	public LinkedList<Integer> adjacentNodes(int last) {
		LinkedHashSet<Integer> adjacent = map.get(last);
		if (adjacent == null) {
			return new LinkedList();
		}
		return new LinkedList<Integer>(adjacent);
	}
}

public class FishMonger {
	// private static final String START = "B";
	// private static final String END = "E";
	private static int N;
	private static int M;
	private static int K;
	private static int start;
	private static int end;
	static Map<Integer, Integer> cmap = new HashMap<Integer, Integer>();
	static ArrayList<ArrayList<Integer>> path = new ArrayList<>();
	static Map<Integer, HashSet<Integer>> fishSold = new HashMap<Integer, HashSet<Integer>>();
	static Map<HashMap<Integer, Integer>, Integer> edgeWeight = new HashMap<HashMap<Integer, Integer>, Integer>();

	public static void main(String[] args) {
		// this graph is directional
		//
		FGraph graph = new FGraph();

		Scanner in = new Scanner(System.in);
		N = in.nextInt();
		M = in.nextInt();
		K = in.nextInt();
		for (int c = 1; c <= N; c++) {
			int nF = in.nextInt();
			HashSet<Integer> st = new HashSet<>();
			for (int f = 1; f <= nF; f++) {
				st.add(in.nextInt());
			}
			fishSold.put(c, st);
			// cmap.put(c, in.nextInt());
		}
		for (int n = 1; n <= M; n++) {
			int node1 = in.nextInt();
			int node2 = in.nextInt();
			int weight = in.nextInt();
			HashMap<Integer, Integer> arg0 = new HashMap<>();
			arg0.put(node1, node2);
			edgeWeight.put(arg0, weight);
			graph.addEdge(node1, node2);
		}
		start = 1;
		end = N;
		LinkedList<Integer> visited = new LinkedList();
		visited.add(start);
		new FishMonger().depthFirst(graph, visited);
		// System.out.println(path);
		ArrayList<Integer> minPathCost = new ArrayList<>();
		for (int t = 0; t < path.size() - 1; t++) {
			Set<Integer> fS = new HashSet<>();
			int pathCostS = 0;
			for (int a = 0; a < path.get(t).size() - 1; a++) {
				int x = path.get(t).get(a);
				int y = path.get(t).get(a + 1);
				if (!fishSold.get(x).isEmpty())
					fS.addAll(fishSold.get(x));
				if (!fishSold.get(y).isEmpty())
					fS.addAll(fishSold.get(y));
				HashMap<Integer, Integer> key = new HashMap<>();
				key.put(x, y);
				pathCostS += edgeWeight.get(key);
			}
			for (int z = t + 1; z < path.size(); z++) {
				int pathCostB = 0;
				Set<Integer> tempSet = new HashSet<>(fS);
				for (int a = 0; a < path.get(z).size() - 1; a++) {
					int u = path.get(z).get(a);
					int v = path.get(z).get(a + 1);
					if (!fishSold.get(u).isEmpty())
						tempSet.addAll(fishSold.get(u));
					if (!fishSold.get(v).isEmpty())
						tempSet.addAll(fishSold.get(v));
					HashMap<Integer, Integer> key = new HashMap<>();
					key.put(u, v);
					pathCostB += edgeWeight.get(key);
				}
				if (tempSet.size() == K) {
					minPathCost.add((pathCostB > pathCostS) ? pathCostB : pathCostS);
				}

			}
		}
		Collections.sort(minPathCost);
		System.out.println(minPathCost.get(0));

	}
	private int pathCost(ArrayList<Integer> al){
		int pathcost= 0;
		for (int a = 0; a < al.size() - 1; a++) {
			HashMap<Integer, Integer> key = new HashMap<>();
			key.put(al.get(a), al.get(a+1));
			pathcost += edgeWeight.get(key);
		}
		return pathcost;
	}
	private Set<Integer> fishSells(ArrayList<Integer> al){
		Set<Integer> set = new HashSet<>();
		for(int a:al){
			set.addAll(fishSold.get(a));
		}
		return set;
	}
	private void depthFirst(FGraph graph, LinkedList<Integer> visited) {
		LinkedList<Integer> nodes = graph.adjacentNodes(visited.getLast());
		for (Integer node : nodes) {
			if (visited.contains(node)) {
				continue;
			}

			if (node.equals(end)) {
				visited.add(node);
				path.add(printPath(visited));
				visited.removeLast();
				break;
			}

		}
		for (Integer node : nodes) {
			if (visited.contains(node) || node.equals(end)) {
				continue;
			}
			visited.addLast(node);
			depthFirst(graph, visited);
			visited.removeLast();
		}

	}

	private ArrayList<Integer> printPath(LinkedList<Integer> visited) {
		ArrayList<Integer> al = new ArrayList<Integer>();
		for (Integer node : visited) {

			al.add(node);

		}

		return al;
	}
}