package amit.diu;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;

class FGraph {
	private Map<Integer, LinkedHashSet<Integer>> map = new HashMap();

	public void addEdge(int node1, int node2) {
		LinkedHashSet<Integer> adjacent = map.get(node1);
		if (adjacent == null) {
			adjacent = new LinkedHashSet();
			map.put(node1, adjacent);
		}
		adjacent.add(node2);
	}

	public void addTwoWayVertex(int node1, int node2) {
		addEdge(node1, node2);
		addEdge(node2, node1);
	}

	public boolean isConnected(int node1, int node2) {
		Set adjacent = map.get(node1);
		if (adjacent == null) {
			return false;
		}
		return adjacent.contains(node2);
	}

	public LinkedList<Integer> adjacentNodes(int last) {
		LinkedHashSet<Integer> adjacent = map.get(last);
		if (adjacent == null) {
			return new LinkedList();
		}
		return new LinkedList<Integer>(adjacent);
	}
}

public class FishMonger {
	// private static final String START = "B";
	// private static final String END = "E";
	private static int N;
	private static int M;
	private static int K;
	private static int start;
	private static int end;
	static Map<Integer, Integer> cmap = new HashMap<Integer, Integer>();
	static ArrayList<ArrayList<Integer>> path = new ArrayList<>();
	static Map<Integer,HashSet<Integer>> fishSold=new HashMap<Integer, HashSet<Integer>>();
	static Map<HashMap<Integer,Integer>,Integer> edgeWeight=new HashMap< HashMap<Integer,Integer>, Integer>();
	public static void main(String[] args) {
		// this graph is directional
		//
		FGraph graph = new FGraph();

		Scanner in = new Scanner(System.in);
		N = in.nextInt();
		M=in.nextInt();
		K=in.nextInt();
		for (int c = 1; c <= N; c++) {
			int nF=in.nextInt();
			HashSet<Integer> st=new HashSet<>();
			for(int f=1;f<=nF;f++){
				st.add(in.nextInt());
			}
			fishSold.put(c, st);
			//cmap.put(c, in.nextInt());
		}
		for (int n = 1; n <= M; n++) {
			int node1 = in.nextInt();
			int node2 = in.nextInt();
			int weight=in.nextInt();
			HashMap<Integer, Integer> arg0 =new HashMap<>();
			arg0.put(node1, node2);
			edgeWeight.put(arg0, weight);
			graph.addEdge(node1, node2);
		}
		start = 1;
		end = N;
		LinkedList<Integer> visited = new LinkedList();
		visited.add(start);
		new FishMonger().depthFirst(graph, visited);
		System.out.println(path);

	}

	private void depthFirst(FGraph graph, LinkedList<Integer> visited) {
		LinkedList<Integer> nodes = graph.adjacentNodes(visited.getLast());
		// examine adjacent nodes
		for (Integer node : nodes) {
			if (visited.contains(node)) {
				continue;
			}

			if (node.equals(end)) {
				visited.add(node);
				path.add(printPath(visited));
				visited.removeLast();
				break;
			}

		}
		for (Integer node : nodes) {
			if (visited.contains(node) || node.equals(end)) {
				continue;
			}
			visited.addLast(node);
			depthFirst(graph, visited);
			visited.removeLast();
		}

	}

	private ArrayList<Integer> printPath(LinkedList<Integer> visited) {
//		Set<Integer> intSet = new HashSet<Integer>();
		ArrayList<Integer> al = new ArrayList<Integer>();
		for (Integer node : visited) {
//			intSet.add(cmap.get(node));
			// cmap.get(node);
			al.add(node);
//			System.out.print(node);
//			System.out.print(" ");

		}
//		System.out.println("Size: " + (intSet.size()));
		return al;
	}
}