package amit.diu;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Scanner;

public class Search {

    private static String START;
    private static  String END ;
    static Map<Integer,Integer> cmap=new HashMap<Integer,Integer>();
    public static void main(String[] args) {
        // this graph is directional
        Graph graph = new Graph();
        Scanner in=new Scanner(System.in);
        int N=in.nextInt();
        for(int c=1;c<=N;c++){
        	cmap.put(c,in.nextInt());
        }
        for(int n=1;n<N;n++){
        	String node1=String.valueOf(in.nextInt());
        	String node2=String.valueOf(in.nextInt());
        	graph.addEdge(node1, node2);
        }
        for(int k=1;k<=N;k++){
        	START=String.valueOf(k);
        	for(int m=1;m<=N;m++){
        		END=String.valueOf(m);
        		
        		LinkedList<String> visited = new LinkedList();
                visited.add(START);
                new Search().depthFirst(graph, visited);
        	}
        }
    }

    private void depthFirst(Graph graph, LinkedList<String> visited) {
        LinkedList<String> nodes = graph.adjacentNodes(visited.getLast());
        // examine adjacent nodes
        for (String node : nodes) {
            if (visited.contains(node)) {
                continue;
            }
            if (node.equals(END)) {
                visited.add(node);
                printPath(visited);
                visited.removeLast();
                break;
            }
        }
        for (String node : nodes) {
            if (visited.contains(node) || node.equals(END)) {
                continue;
            }
            visited.addLast(node);
            depthFirst(graph, visited);
            visited.removeLast();
        }
    }

    private void printPath(LinkedList<String> visited) {
        for (String node : visited) {
            System.out.print(node);
            System.out.print(" ");
        }
        System.out.println();
    }
}