import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Scanner;
import java.util.Set;

public class SixN_Cryption {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc=new Scanner(System.in);
		boolean flag=false;
		while(sc.hasNext()){
			if(flag)sc.nextLine();
			else flag=true;
			int en=sc.nextInt();
			int n=sc.nextInt();
			sc.nextLine();
			long num[]=new long[n];
			for(int k=0;k<n;k++){
				num[k]=Long.parseLong(sc.nextLine());
				
			}
			Arrays.sort(num);
			long bigP=0l;
			Set<Long>bigPrime=primeFactors(num[0]);
			Long [] al = new Long[bigPrime.size()];
			bigPrime.toArray(al);
			Arrays.sort(al);
			bigP=al[al.length-1];
			long sum=0;
			for(int i=0;i<n;i++){
				sum+=num[i]/bigP;
			}
			System.out.println("Output: "+(en-sum));
		}

	}
	public static Set<Long> primeFactors(long number) {
        Set<Long> primefactors = new HashSet<>();
        long copyOfInput = number;

        for (long i = 2l; i <= copyOfInput; i++) {
            if (copyOfInput % i == 0) {
                primefactors.add(i); // prime factor
                copyOfInput /= i;
                i--;
            }
        }
        return primefactors;
    }


	

}
