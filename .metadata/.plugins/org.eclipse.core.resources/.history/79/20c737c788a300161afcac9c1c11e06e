import java.math.BigInteger;
import java.util.Arrays;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Scanner;
import java.util.Set;

public class SixN_Cryption {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc=new Scanner(System.in);
		boolean flag=false;
		while(sc.hasNext()){
			if(flag)sc.nextLine();
			else flag=true;
			int en=sc.nextInt();
			int n=sc.nextInt();
			sc.nextLine();
			long num[]=new long[n];
			for(int k=0;k<n;k++){
				num[k]=Long.parseLong(sc.nextLine());
				
			}
			Arrays.sort(num);
			
			long bigPrime=primeFactors(num[0]);
			long sum=0;
			for(int i=0;i<n;i++){
				sum+=num[i]/bigPrime;
			}
			System.out.println("Output: "+(en-sum));
		}

	}
	public static long primeFactors(long number) {
  
        long copyOfInput = (long) Math.sqrt(number);

        for (long i = copyOfInput; i >= 2; i--) {
        	BigInteger big=BigInteger.valueOf(i);
        	if(big.isProbablePrime(1))return i;

        }
        return copyOfInput;
    }


	

}
